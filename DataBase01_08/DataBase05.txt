6-2. 그룹함수의 조건식
( 조건식에서 그룹함수가사용되면  WHERE절이 아닌 HAVING절을 사용. )

예) 직종, 직종별 급여의 최대치를 화면에 출력
단, 최대 급여가 5000이상인 경우에만 출력.
SELECT job_id, MAX(salary)
FROM employees
having max(salary) >= 5000 
group by job_id;

예) 각 부서별  급여의 최대값, 최소값, 인원수를 출력
단, 급여의 최대값이 8000이상인 경우만 출력
select department_id, MAX(salary), MIN(salary), count(*)
from employees
where department_id IS NOT NULL --null이 아닌 결과를 검색
group by department_id
having MAX(salary) >= 8000;

문) 각 부서별 부서번호, 급여의 합, 평균, 인원수 순으로 출력
단, 급여의 합이 30000이상인 경우만 출력해야 하며, 
급여의 평균은 소수점 2자리까지 반올림하여 표시하시오.
select department_id, sum(salary), round(avg(salary),2), count(*)
from employees
group by  department_id
having sum(salary) >= 30000;

문) 각 부서별 평균 급여를 조회
     단, 평균 급여가 10000미만인 그룹만 조회해야 하며,
     부서번호가 50번 이하인 부서만 조회
select department_id, avg(salary)
from employees
where department_id <= 50
group by department_id
having avg(salary) < 10000;
---------------------------
7. DECODE 함수 
--자바의 비교문과 유사하다
--DECODE 함수의 구성
  ** DECODE( 참조값, 조건식, 참값, 거짓값 ) 
  ** DECODE( 참조값, 조건식1, 조건1의 참값, 
		   조건식2, 조건2의 참값, 거짓값) 
	
예) 각 부서별로 인원수가 45명이면 "인원조정 필요",
     34인 부서는 "검토중", 6명이면 "적정인원", 그 외는 "대기"라고 출력
select department_id , count(*),
        DECODE( count(*), 45, '인원조정',
		        34, '검토중',
		        6,'적정인원',  '대기')
from employees
group by department_id;
--------------------------------
8. subquery
- 특정 sql문장 안에 또다른 sql문장이 포함되어 있는것
- 서브쿼리를 사용 가능 한 곳!
  1)WHERE, HAVING
  2)SELECT, DELETE의 FROM절
  3)UPDATE의 SET
  4)INSERT의 INTO
예) 사원테이블에서 이름이 Michael이고, 직종이 MK_MAN인 사원의 급여보다
     많은 급여를 받는 사원들의 정보를 사번, 이름, 직종, 급여순으로 출력 

- 문제 접근1) 이름이 Michael이고 , 직종이 MK_MAN인 사원의 급여
select salary
from employees
where first_name = 'Michael' and job_id = 'MK_MAN';

- 문제 접근2) 13000보다 급여를 많이 받는 사원들의 정보
select employee_id, first_name, job_id, salary
from employees
where salary > 13000

--서브쿼리를 사용하여 위의 문제를 해결
select employee_id, first_name, job_id, salary
from employees
where salary > ( select first_name , job_id , salary
from employees
where first_name = 'Michael' and job_id = 'MK_MAN' );

문) 사원테이블에서 사번이 150인 사원의 급여와 같은 금액을 받는
    사원의 이름, 직종, 급여를 출력

select first_name, job_id, salary
from employees
where salary = ( select salary from employees where employee_id = 150 );

문) 월급이 회사 평균월급 이상인 사원들의 이름과 월급을 출력

select first_name, salary
from employees
where salary >= ( select avg(salary) from employees  );

문) Bruce와 같은 부서에서 근무하고 있는 사원들의 이름을 출력
select first_name 
from employees
where department_id = ( select department_id from employees where first_name = 'Bruce' );

문) 직종, 급여의 평균을 출력하되
     평균 급여가 Bruce보다 큰 사람들을 조회하시오
select job_id, avg(salary)
from employees
group by job_id
having avg( salary ) > ( select salary from employees where first_name = 'Bruce' );

문) 사원테이블에서 last_name이 Kochhar의 급여보다 많이받는 
     사원의 사번, last_name, 직종, 급여를 출력
select employee_id, last_name, job_id, salary
from employees
where salary > ( select salary from employees where last_name = 'Kochhar'  );

문) 137번 사원보다 월급이 크거나 같고, 149번 사원보다 
월급이 작거나 같은 사원들의 이름과 월급을 출력
select first_name, salary
from employees
where salary >= ( select salary from employees where employee_id = 137 )
         and salary <= ( select salary from employees where employee_id = 149 );

select first_name, salary
from employees
where salary
Between ( select salary from employees where employee_id = 137 )
AND ( select salary from employees where employee_id = 149 );

문) 사원테이블에서 last_name중에 'Bat'이라는 단어를 포함하고 있는 
사원과 같은 부서에 근무하는 사원들의 전체정보를 출력
select *
from employees
where department_id = ( select department_id from employees where last_name like '%Bat%' );	

문) 사원테이블에서 사번이 111번인 사원의 직종과 같고  
     사번이 159번인 사원의 급여보다 많이 받는 사원들의 정보를
     사번, 이름, 직종, 급여 순으로 출력

select employee_id, first_name, job_id, salary
from employees
where job_id = ( select job_id from employees where employee_id = 111 )
and salary >  (select salary from employees where employee_id = 159 );.

--테이블 생성
create table test(
	id VARCHAR2(20) primary key,
	pwd NUMBER(5),
	name VARCHAR2(50),
	addr VARCHAR2(50),
	email VARCHAR2(100)
);
기본키 (primary key) : 고유한 식별자로써, 속성의 중복을 방지하기 위한 키워드
후보키(candidate key) : id, pwd, name과 같이 기본키가 될 자격이있는 
		     나머지 컬럼들

외래키(foreign key) : 한 테이블의 속성이 다른 테이블의 기본 키가 되는 것.
---------------------------
